Kiindul√°s: szeretn√©k szoftvertesztel√©s tant√°rgyb√≥l a technikus oszt√°lyban olyan gyakorlati feladatot adni, amiben a di√°kok egy kicsi projekten, ami kital√°lt is lehet, gyakorolni tudj√°k a tesztel√©si m√≥dszereket, dokument√°ci√≥t, prezent√°ci√≥t k√©t f≈ës kis csapatokban, ami seg√≠thet nekik a j√∂v≈ë √©vben k√©sz√≠tend≈ë projektmunka II tant√°rgyukhoz, amiben 3 f≈ës teamekben kell megval√≥s√≠taniuk egy szoftveres projektet fejleszt√©sest≈ël tesztel√©sest≈ël √∂n√°ll√≥an √©s prezent√°lniuk kell egy vizsgabizotts√°g el≈ëtt. Erre val√≥ r√°hangol√≥d√°sk√©pp szeretn√©k kimondottan szoftverfejleszt√©si projektet, ami hasonl√≠t kicsiben erre.


Ez egy nagyszer≈± kezdem√©nyez√©s, amely el≈ëseg√≠ti a di√°kok projektalap√∫ tanul√°s√°t, √©s felk√©sz√≠ti ≈ëket a k√∂vetkez≈ë √©v kih√≠v√°saira! Az al√°bbiakban bemutatok egy gyakorlatot, amely megfelel ezeknek a c√©loknak:

---

### **Szoftvertesztel√©si gyakorlat: Mini projekt fejleszt√©ssel √©s tesztel√©ssel**
**C√©l:**  
A di√°kok gyakorolj√°k a szoftverfejleszt√©s √©s tesztel√©s alapvet≈ë l√©p√©seit, mik√∂zben fejlesztik csapatmunk√°jukat, dokument√°ci√≥s √©s prezent√°ci√≥s k√©szs√©geiket.

#### **Projekt√∂tlet: Egyszer≈± To-Do Lista Webalkalmaz√°s**
**Feladat:** K√©sz√≠tsenek egy egyszer≈± webalkalmaz√°st, amely lehet≈ëv√© teszi a felhaszn√°l√≥k sz√°m√°ra, hogy feladatokat adjanak hozz√°, jel√∂lj√©k ≈ëket elv√©gzettk√©nt, √©s t√∂r√∂lj√©k ≈ëket.  

---

### **Feladatok lebont√°sa:**
1. **Projekt el≈ëk√©sz√≠t√©se (1 √≥ra):**
   - **C√©lmeghat√°roz√°s:** A csapat hat√°rozza meg a projekt c√©lj√°t (pl. "Egy egyszer≈± To-Do lista webalkalmaz√°s fejleszt√©se").
   - **Specifik√°ci√≥ k√©sz√≠t√©se:** R√∂vid specifik√°ci√≥, amely tartalmazza:
     - Funkci√≥k (feladat hozz√°ad√°sa, t√∂rl√©se, st√°tusz m√≥dos√≠t√°sa).
     - Minimum k√∂vetelm√©nyek (pl. m≈±k√∂dj√∂n b√∂ng√©sz≈ëben).
   - **Feladatmegoszt√°s:** Hat√°rozz√°k meg, ki mit fog csin√°lni (fejleszt√©s, tesztel√©s, dokument√°ci√≥).

2. **Fejleszt√©s (2 √≥ra):**
   - **Technol√≥gia v√°laszt√°s:** HTML/CSS/JavaScript vagy egy egyszer≈± keretrendszer (pl. React, ha m√°r tanult√°k).
   - **Protot√≠pus k√©sz√≠t√©se:** Alap funkci√≥k implement√°l√°sa.
   - **K√≥d komment√°l√°sa:** A k√©s≈ëbbi tesztel√©s √©s √©rt√©kel√©s megk√∂nny√≠t√©se √©rdek√©ben.

3. **Tesztel√©si szakasz (2 √≥ra):**
   - **Tesztterv k√©sz√≠t√©se:** A di√°kok √≠rjanak egy egyszer≈± teszttervet, amely tartalmazza:
     - Funkcion√°lis tesztek (pl. hozz√°ad-e √∫j feladatot?).
     - Hibakezel√©s tesztel√©se (pl. √ºres inputok).
     - Felhaszn√°l√≥i √©lm√©ny ellen≈ërz√©se.
   - **Tesztel√©s v√©grehajt√°sa:** V√©gezzenek manu√°lis teszteket a terv alapj√°n.
   - **Hibajegyz√©k vezet√©se:** Dokument√°lj√°k a tal√°lt hib√°kat (hiba le√≠r√°sa, jav√≠t√°s st√°tusza).

4. **Dokument√°ci√≥ √©s prezent√°ci√≥ (1 √≥ra):**
   - **Dokument√°ci√≥:** K√©sz√≠tsenek egy egyszer≈±, de rendezett projektle√≠r√°st, amely tartalmazza:
     - A projekt c√©lj√°t √©s funkci√≥it.
     - A fejleszt√©si folyamat √∂sszefoglal√°s√°t.
     - A tesztel√©si eredm√©nyeket √©s a hibajav√≠t√°sokat.
   - **Prezent√°ci√≥:** K√©sz√≠tsenek egy r√∂vid (5 perces) bemutat√≥t a projekt c√©ljair√≥l, a fejleszt√©si folyamatr√≥l √©s a tanuls√°gokr√≥l.

---

### **√ârt√©kel√©si szempontok:**
1. **Csapatmunka:** Mennyire hat√©konyan dolgoztak egy√ºtt?
2. **Projektmegval√≥s√≠t√°s:** A k√©sz projekt megfelel-e a specifik√°ci√≥nak?
3. **Tesztel√©si folyamat:** Megfelel≈ëen dokument√°lt√°k-e √©s hajtott√°k v√©gre a teszteket?
4. **Dokument√°ci√≥:** √Åtl√°that√≥ √©s √©rthet≈ë a dokument√°ci√≥?
5. **Prezent√°ci√≥:** Magabiztosak √©s struktur√°ltak voltak-e a bemutat√≥ sor√°n?

---

Ez a feladat nemcsak a technikai k√©szs√©geiket fejleszti, hanem seg√≠t abban is, hogy megtanulj√°k a projektmunka √©s csapatmunka jelent≈ës√©g√©t, ami a k√©s≈ëbbi vizsgaprojektj√ºkh√∂z n√©lk√ºl√∂zhetetlen lesz. Ha szeretn√©l, sz√≠vesen seg√≠tek r√©szletesebben kidolgozni a feladat egyes r√©szeit! üòä


Nagyszer≈± √∂tlet, hogy egy√ºttm≈±k√∂d√©st seg√≠t≈ë eszk√∂z√∂ket √©s automatiz√°lt tesztel√©st is be√©p√≠tesz a feladatba! Ez tov√°bb fokozza a di√°kok szakmai k√©szs√©geinek fejl≈ëd√©s√©t. Az al√°bbiakban az eredeti tervet b≈ëv√≠tem ezekkel az elemekkel.

---

### **B≈ëv√≠tett gyakorlat: Szoftverfejleszt√©si mini projekt**  
**Projekt√∂tlet:** Tov√°bbra is egy **To-Do lista webalkalmaz√°s**, kib≈ëv√≠tve az al√°bbi elemekkel:  
- **Egy√ºttm≈±k√∂d√©si eszk√∂z√∂k:** Trello/Jira √©s GitHub.
- **Automatiz√°lt tesztel√©s:** Egyszer≈± tesztel√©si keretrendszer haszn√°lata (pl. Jest, Cypress).

---

### **Feladatok lebont√°sa (b≈ëv√≠tve):**

#### **1. Projekt el≈ëk√©sz√≠t√©se (1 √≥ra):**  
- **C√©lmeghat√°roz√°s √©s specifik√°ci√≥:** Ugyanaz, mint az eredeti tervben.  
- **Egy√ºttm≈±k√∂d√©si eszk√∂z√∂k be√°ll√≠t√°sa:**  
  - **Trello/Jira:**  
    - Hozzanak l√©tre egy t√°bl√°t, amelyen nyomon k√∂vethetik a feladatok √°llapot√°t (pl. "Teend≈ë", "Folyamatban", "K√©sz").  
    - Minden csapattag hozzon l√©tre √©s kezeljen n√©h√°ny k√°rty√°t a saj√°t feladatair√≥l.  
  - **GitHub:**  
    - Hozzanak l√©tre egy priv√°t vagy nyilv√°nos repository-t, ahol a k√≥dot verzi√≥k√∂vetik.  
    - Haszn√°lj√°k az Issue-kat a feladatok dokument√°l√°s√°ra, √©s legal√°bb egyszer pr√≥b√°lj√°k ki a Pull Request funkci√≥t.  

---

#### **2. Fejleszt√©s (2 √≥ra):**  
- **Technol√≥gia v√°laszt√°s:** HTML/CSS/JavaScript (vagy React, ha tanult√°k).  
- **K√≥dol√°s GitHub-on kereszt√ºl:**  
  - Ossz√°k meg a feladatokat (pl. egyik di√°k az UI-t k√©sz√≠ti, a m√°sik az adatkezel√©st).  
  - Verzi√≥kezel√©ssel dolgozzanak: minden commit √ºzenet legyen r√∂vid, de informat√≠v.  

---

#### **3. Tesztel√©si szakasz (2 √≥ra):**  
- **Tesztterv k√©sz√≠t√©se:** Az eredeti terv szerint.  
- **Automatiz√°lt tesztel√©s (√∫jdons√°g):**  
  - **Eszk√∂z v√°laszt√°s:**  
    - **Frontend tesztekhez:** [Jest](https://jestjs.io/) vagy [Cypress](https://www.cypress.io/).  
    - **Haszn√°lati p√©lda (Jest):**  
      - Tesztelj√©k az alkalmaz√°s funkci√≥it (pl. √∫j feladat hozz√°ad√°sa).  
      - √çrjanak legal√°bb k√©t tesztet, p√©ld√°ul:  
        ```javascript
        test("√öj feladat hozz√°ad√°sa", () => {
          const tasks = [];
          const newTask = "V√°s√°rl√°s";
          tasks.push(newTask);
          expect(tasks).toContain("V√°s√°rl√°s");
        });
        ```  
    - **Cypress (automatiz√°lt UI teszt):**  
      - Telep√≠t√©s ut√°n hozzanak l√©tre egy egyszer≈± tesztet, amely megnyitja az alkalmaz√°st, hozz√°ad egy feladatot, √©s ellen≈ërzi, hogy megjelenik.  

---

#### **4. Dokument√°ci√≥ √©s prezent√°ci√≥ (1 √≥ra):**  
- **Dokument√°ci√≥:**  
  - Tervek √©s specifik√°ci√≥k.  
  - Tesztel√©si eredm√©nyek (manu√°lis √©s automatiz√°lt tesztek).  
  - GitHub √©s Trello/Jira felhaszn√°l√°s√°nak r√∂vid bemutat√°sa (k√©perny≈ëfot√≥kkal).  
- **Prezent√°ci√≥:**  
  - A csapat mutassa be az alkalmaz√°st, a fejleszt√©si folyamatot √©s a tanuls√°gokat.

---

### **√ârt√©kel√©si szempontok (kieg√©sz√≠tve):**  
1. **Csapatmunka:** Hogyan haszn√°lt√°k a Trello/Jira √©s GitHub funkci√≥it?  
2. **Automatiz√°lt tesztel√©s:** Legal√°bb egy teszt helyes m≈±k√∂d√©se.  
3. **Projektmegval√≥s√≠t√°s √©s dokument√°ci√≥:** A kor√°bban meghat√°rozott szempontok szerint.  

---

Ez a b≈ëv√≠tett verzi√≥ lehet≈ëv√© teszi, hogy a di√°kok megtapasztalj√°k, hogyan m≈±k√∂dnek a modern fejleszt√©si projektekben haszn√°latos eszk√∂z√∂k √©s m√≥dszerek. Ha szeretn√©d, k√©sz√≠thetek hozz√° r√©szletesebb le√≠r√°sokat, p√©ldak√≥dokat vagy ak√°r oktat√≥anyagokat! üòä


K√©sz√≠tek r√©szletesebb √∫tmutat√≥kat √©s p√©ld√°kat a feladat minden fontos elem√©hez, hogy megk√∂nny√≠tsem a di√°kok munk√°j√°t, √©s te is egyszer≈±bben tudj oktatni. Az al√°bbi bont√°sban k√©sz√≠tem el az anyagokat:

---

### **1. Trello/Jira haszn√°lat√°nak bemutat√°sa**
- P√©lda egy Trello-t√°bla strukt√∫r√°j√°ra, k√°rty√°kra, √©s azok kezel√©s√©re.
- R√∂vid bemutat√≥ Jira-projekthez, p√©ld√°ul issue-k √©s sprintek l√©trehoz√°sa.

---

### **2. GitHub gyakorlati √∫tmutat√≥**
- Repository l√©trehoz√°sa √©s be√°ll√≠t√°sa.
- Verzi√≥kezel√©si alapok: commit, push, pull, branch haszn√°lat.
- Pull request p√©ld√°k √©s issue kezel√©s.

---

### **3. Automatiz√°lt tesztel√©s**
- **Jest p√©lda:**
  - Telep√≠t√©si √∫tmutat√≥.
  - Legal√°bb 2-3 tesztk√≥d bemutat√°sa egy egyszer≈± To-Do alkalmaz√°shoz.
- **Cypress p√©lda:**
  - Alapvet≈ë telep√≠t√©si l√©p√©sek.
  - Egy alapvet≈ë automatiz√°lt teszt (p√©ld√°ul "Feladat hozz√°ad√°sa" UI-teszt).

---

### **4. P√©lda alkalmaz√°s (To-Do lista)**
- Egyszer≈± HTML/CSS/JavaScript projekt (vagy React, ha a di√°kok tanult√°k).
- K√≥dv√°zlat √©s f√°jlstrukt√∫ra bemutat√°sa.

---

### **5. Prezent√°ci√≥s seg√©danyag**
- Minta prezent√°ci√≥ di√°kok sz√°m√°ra, amely tartalmazza:  
  - Projekt c√©lj√°t √©s funkcionalit√°s√°t.
  - Haszn√°lt eszk√∂z√∂ket (Trello/Jira, GitHub, tesztel√©si eszk√∂z√∂k).
  - Tesztel√©si eredm√©nyeket.
  - Neh√©zs√©geket √©s tanuls√°gokat.

---

Elkezdem √∂ssze√°ll√≠tani ezeket az anyagokat. Az egyszer≈±bb fel√©p√≠t√©s √©rdek√©ben k√ºl√∂n dokumentumot k√©sz√≠tek hozz√°. K√©rlek, er≈ës√≠tsd meg, hogy √≠gy megfelel≈ë, vagy szeretn√©l v√°ltoztatni a strukt√∫r√°n! üòä



Term√©szetesen! Az √∂tlet, hogy a technol√≥gi√°k elt√©rnek, de a projekt c√©lja azonos (pl. **To-Do Lista**), kiv√°l√≥, mert √≠gy a di√°kok a szoftverfejleszt√©s k√∂z√∂s alapjaira √©s a technol√≥giaspecifikus k√ºl√∂nbs√©gekre is r√°√©reznek. Az al√°bbiakban bemutatom a **To-Do Lista alkalmaz√°s** WPF-re √©s SQLite-ra adapt√°lt v√°ltozat√°t.

---

### **To-Do Lista alkalmaz√°s (WPF, C#, SQLite)**

**Projektc√©l:**  
Egy asztali alkalmaz√°s, amely lehet≈ëv√© teszi a felhaszn√°l√≥k sz√°m√°ra teend≈ëk hozz√°ad√°s√°t, megtekint√©s√©t, szerkeszt√©s√©t √©s t√∂rl√©s√©t. Az alkalmaz√°s WPF-et haszn√°l az UI-hoz √©s SQLite-ot az adatok t√°rol√°s√°hoz.

---

### **Feladatok lebont√°sa:**

#### **1. Projekt el≈ëk√©sz√≠t√©se (1 √≥ra):**  
- **C√©lmeghat√°roz√°s:**  
  - A felhaszn√°l√≥k k√©pesek legyenek:
    - √öj teend≈ëk hozz√°ad√°sa (pl. c√≠m, hat√°rid≈ë, st√°tusz: elv√©gzett/nem elv√©gzett).  
    - Teend≈ëk list√°z√°sa egy t√°bl√°zatban.  
    - Teend≈ëk szerkeszt√©se √©s t√∂rl√©se.
  - SQLite haszn√°lata az adatok t√°rol√°s√°ra.  
- **K√∂rnyezet el≈ëk√©sz√≠t√©se:**  
  - Visual Studio projekt l√©trehoz√°sa (WPF App).
  - `System.Data.SQLite` NuGet csomag telep√≠t√©se.  

---

#### **2. Adatb√°zis-kapcsolat l√©trehoz√°sa (1 √≥ra):**  
- **Adatb√°zis el≈ëk√©sz√≠t√©se:**  
  - `Tasks.db` n√©ven hozzanak l√©tre egy SQLite adatb√°zist.  
  - Adatt√°bla l√©trehoz√°sa:
    ```sql
    CREATE TABLE Tasks (
        Id INTEGER PRIMARY KEY AUTOINCREMENT,
        Title TEXT NOT NULL,
        Deadline DATE,
        Status TEXT NOT NULL
    );
    ```
- **C# adatb√°zis-kezel≈ë oszt√°ly:**  
    ```csharp
    public class DatabaseHelper
    {
        private const string ConnectionString = "Data Source=Tasks.db;Version=3;";

        public static void ExecuteQuery(string query)
        {
            using (var connection = new SQLiteConnection(ConnectionString))
            {
                connection.Open();
                var command = new SQLiteCommand(query, connection);
                command.ExecuteNonQuery();
            }
        }

        public static DataTable GetData(string query)
        {
            using (var connection = new SQLiteConnection(ConnectionString))
            {
                connection.Open();
                var command = new SQLiteCommand(query, connection);
                var adapter = new SQLiteDataAdapter(command);
                var table = new DataTable();
                adapter.Fill(table);
                return table;
            }
        }
    }
    ```

---

#### **3. UI fejleszt√©s WPF-ben (2 √≥ra):**  
- **F≈ëablak tervez√©se:**  
  - **Fel√ºletelemek:**
    - `TextBox` a teend≈ë c√≠m√©nek megad√°s√°hoz.
    - `DatePicker` a hat√°rid≈ë kiv√°laszt√°s√°hoz.
    - `ComboBox` a st√°tusz kiv√°laszt√°s√°hoz (`Elv√©gzett`, `Nem elv√©gzett`).
    - `DataGrid` a teend≈ëk list√°z√°s√°hoz.
    - `Button` elemek: Hozz√°ad√°s, Szerkeszt√©s, T√∂rl√©s.
- **P√©lda XAML:**
    ```xml
    <Grid Margin="10">
        <StackPanel Orientation="Vertical">
            <TextBox x:Name="TitleTextBox" PlaceholderText="Teend≈ë c√≠me" Margin="0,5" />
            <DatePicker x:Name="DeadlinePicker" Margin="0,5" />
            <ComboBox x:Name="StatusComboBox" Margin="0,5">
                <ComboBoxItem Content="Nem elv√©gzett" />
                <ComboBoxItem Content="Elv√©gzett" />
            </ComboBox>
            <StackPanel Orientation="Horizontal" Margin="0,10">
                <Button Content="Hozz√°ad√°s" Click="AddButton_Click" Margin="5,0" />
                <Button Content="Szerkeszt√©s" Click="EditButton_Click" Margin="5,0" />
                <Button Content="T√∂rl√©s" Click="DeleteButton_Click" Margin="5,0" />
            </StackPanel>
            <DataGrid x:Name="TasksDataGrid" AutoGenerateColumns="True" Margin="0,10" />
        </StackPanel>
    </Grid>
    ```

---

#### **4. Funkcionalit√°s fejleszt√©se (2 √≥ra):**  
- **Adatok hozz√°ad√°sa:**
    ```csharp
    private void AddButton_Click(object sender, RoutedEventArgs e)
    {
        string title = TitleTextBox.Text;
        string deadline = DeadlinePicker.SelectedDate?.ToString("yyyy-MM-dd");
        string status = (StatusComboBox.SelectedItem as ComboBoxItem)?.Content.ToString();

        string query = $"INSERT INTO Tasks (Title, Deadline, Status) VALUES ('{title}', '{deadline}', '{status}')";
        DatabaseHelper.ExecuteQuery(query);

        LoadTasks();
    }
    ```
- **Adatok bet√∂lt√©se:**
    ```csharp
    private void LoadTasks()
    {
        string query = "SELECT * FROM Tasks";
        TasksDataGrid.ItemsSource = DatabaseHelper.GetData(query).DefaultView;
    }
    ```

---

#### **5. Tesztel√©s √©s dokument√°ci√≥ (2 √≥ra):**  
- **Automatiz√°lt tesztel√©s:**  
  - NUnit vagy xUnit haszn√°lata az adatb√°zis m≈±veletek ellen≈ërz√©s√©re.  
    ```csharp
    [Fact]
    public void TestAddTask()
    {
        string query = "INSERT INTO Tasks (Title, Deadline, Status) VALUES ('Teszt', '2025-01-01', 'Nem elv√©gzett')";
        DatabaseHelper.ExecuteQuery(query);

        var data = DatabaseHelper.GetData("SELECT * FROM Tasks WHERE Title = 'Teszt'");
        Assert.NotEmpty(data.Rows);
    }
    ```
- **Dokument√°ci√≥:**  
  - Fejleszt√©si l√©p√©sek, adatb√°zis-szerkezet, funkci√≥k le√≠r√°sa.

---

### **√ñsszehasonl√≠t√°s a webes To-Do List√°val:**  
- A projekt c√©lja √©s m≈±k√∂d√©se azonos, de:
  - A webes verzi√≥ JavaScript/HTML/CSS √©s REST API-t haszn√°l.
  - Az asztali verzi√≥ WPF √©s SQLite alap√∫, helyi adatb√°zis-kapcsolattal.
  - UI diz√°jn elt√©r, de az adatok √©s a funkcionalit√°s azonos.

---

Ez a projekt seg√≠ti a di√°kokat abban, hogy meg√©rts√©k, hogyan lehet k√ºl√∂nb√∂z≈ë technol√≥gi√°kban ugyanazt a probl√©m√°t megoldani. Ha r√©szletesebb k√≥dot vagy tov√°bbi kieg√©sz√≠t√©seket szeretn√©l, jelezd! üòä